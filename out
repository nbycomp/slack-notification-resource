#!/bin/bash

set -eu

cd "${1}"

exec 3>&1
exec 1>&2

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > "${payload}" <&0

if jq -re '.source.disable' < "${payload}"
then
    jq -n --arg timestamp "$(date +%s)" '{
      version: null,
      metadata: [
        { name: "timestamp", value: $ts }
      ]
    }' >&3
    exit 0
fi

webhook_url="$(jq -r '.source.url // "https://slack.com/api/chat.postMessage"' < "${payload}")"
raw_ca_certs=$(jq -r '.source.ca_certs // []' < $payload)

text_file="$(jq -r '.params.text_file // ""' < "${payload}")"
text="$(jq -r '(.params.text // "${TEXT_FILE_CONTENT}")' < "${payload}")"

attachments="$(jq '(.params.attachments // null)' < "${payload}")"
attachments_file="$(jq -r '.params.attachments_file // ""' < "${payload}")"

channel="$(jq -r '.params.channel // ""' < "${payload}")"
thread_ts="$(jq -r '.params.thread_ts // ""' < "${payload}")"

username="$(jq '.params.username' < "${payload}")"

always_notify="$(jq -r '.params.always_notify // "false"' < "${payload}")"
redact_hook="$(jq -r '.params.redact_hook_url // "true"' < "${payload}")"

# Read the env_file and export it in the current console
env_file="$(jq -r '.params.env_file // ""' < "${payload}")"
if [ -f "$env_file" ]; then
  # export key=value, when value as space but no quotes
  search_key_val='(\w+)=([^\n]+)'

  source <(sed -E -n -r "s/$search_key_val/export \1=\"\2\"/ p" "$env_file")
fi

cert_count="$(echo $raw_ca_certs | jq -r '. | length')"
if [[ ${cert_count} -gt 0 ]]
then
  cert_dir="/usr/local/share/ca-certificates/"
  mkdir -p "$cert_dir"
  for i in $(seq 0 $(expr "$cert_count" - 1));
  do
    echo $raw_ca_certs | jq -r .[$i].cert >> "${cert_dir}/ca-cert-$(echo $raw_ca_certs | jq -r .[$i].domain).crt"
  done
  update-ca-certificates
fi

export TEXT_FILE_CONTENT=""
[[ -n "${text_file}" && ! -f "${text_file}" ]] && text_file=""
[[ -n "${text_file}" && -f "${text_file}" ]] && TEXT_FILE_CONTENT="$(cat "${text_file}")"

ATTACHMENTS_FILE_CONTENT=""
[[ -n "${attachments_file}" && -f "${attachments_file}" ]] && ATTACHMENTS_FILE_CONTENT="$(cat "${attachments_file}")"
if [[ "${attachments}" == "null" && -n $ATTACHMENTS_FILE_CONTENT ]]; then
  attachments=$ATTACHMENTS_FILE_CONTENT
fi

attachments=$(echo "$attachments" | envsubst)

# if set, channel param takes precedence over channel_file
if [[ -z $channel ]]
then
  channel_file="$(jq -r '.params.channel_file' < "${payload}")"
  if [[ -n $channel_file && -f $channel_file ]]
  then
    channel=$(<"$channel_file")
  fi
fi

# if set, thread_ts param takes precedence over thread_ts_file
if [[ -z $thread_ts ]]
then
  thread_ts_file="$(jq -r '.params.thread_ts_file' < "${payload}")"
  if [[ -n $thread_ts_file && -f $thread_ts_file ]]
  then
    thread_ts=$(<"$thread_ts_file")
  fi
fi

curl_options=(
  -H 'Content-Type: application/json; charset=utf-8'
  -T /tmp/compact_body.json
  -X POST
  -o /tmp/output.json
)

if token="$(jq -re '.source.token' < "${payload}")"
then
  curl_options+=( -H "Authorization: Bearer $token" )
fi

if jq -e '.source.insecure' >/dev/null 2>&1 < "${payload}"
then
    curl_options+=( -k )
fi

if proxy=$(jq -re '.source.proxy' < "${payload}")
then
    curl_options+=( --proxy "${proxy}" )
fi

if jq -e '.source.proxy_https_tunnel' >/dev/null 2>&1 < "${payload}"
then
    curl_options+=( --proxytunnel )
fi

if [[ "$always_notify" == "true" || -n "$TEXT_FILE_CONTENT" || -z "$text_file" ]]
then
  if [[ "${attachments}" == "null" ]]
  then
    TEXT_FILE_CONTENT="${TEXT_FILE_CONTENT:-_(no notification provided)_}"
  fi

  text_interpolated=$(echo -n "$text" | envsubst)

  if [[ -z "${text_interpolated}" ]]
  then
    text_interpolated="_(missing notification text)_"
    [[ -n "${attachments}" ]] && text_interpolated="null"
  fi

  body=$(jq \
    --arg text "$text_interpolated" \
    --arg channel "$channel" \
    --arg thread_ts "$thread_ts" \
    --argjson username "$username" \
    '.params | {
      $text,
      $channel,
      $thread_ts,
      $username,
      link_names,
      icon_url,
      icon_emoji,
      attachments
    } | with_entries(select(.value))' "$payload"
  )

  jq -c . <<<"$body" > /tmp/compact_body.json

  if jq -e '.params.debug' >/dev/null 2>&1 < "${payload}"
  then
    debug_info="$(jq -n \
      --arg webhook_url "$webhook_url" \
      --argjson body "$body" \
      '{ $webhook_url, $body }'
    )"
  elif jq -e '.params.silent' >/dev/null 2>&1 < "${payload}"
  then
    echo "Using silent output"
    curl -s "${curl_options[@]}" "${webhook_url}"
  elif [[ ${redact_hook} == "true" ]]
  then
    url_path="$(echo ${webhook_url} | sed -e "s/https\{0,1\}:\/\/[^\/]*\(\/[^?&#]*\).*/\1/")"
    curl -v "${curl_options[@]}" "${webhook_url}" 2>&1 | sed -e "s#${url_path}#***WEBHOOK URL REDACTED***#g"
  else
    curl -v "${curl_options[@]}" "${webhook_url}" 2>&1
  fi
fi

if jq -e '.params.metadata' >/dev/null 2>&1 < "${payload}"
then
  redacted_webhook_url=$(echo "${webhook_url}" | sed -e 's#/\([^/\.]\{2\}\)[^/.]\{5,\}\([^/.]\{2\}\)#/\1â€¦\2#g')
  escaped_text_file="$(echo $text_file | jq -R -s . )"
  text_file_exists="No" && [[ -n "$text_file" ]] && [[ -f "$text_file" ]] && text_file_exists=Yes

  metadata=$(
    jq -n \
      --arg url "$redacted_webhook_url" \
      --arg channel "$channel" \
      --argjson username "$username" \
      --arg text "$text_interpolated" \
      --arg text_file "$text_file" \
      --arg text_file_exists "$text_file_exists" \
      --arg text_file_content "$TEXT_FILE_CONTENT" \
      '{
        $url,
        $channel,
        $username,
        $text,
        $text_file,
        $text_file_exists,
        $text_file_content
      } | to_entries | map({ name: .key, value }) | { metadata: . }'
  )

  if jq -re '.params.payload_in_metadata' >/dev/null 2>&1 < "${payload}"
  then
    if [[ ${redact_hook} == "true" ]]
    then
      payload_string="$(jq -rc '.source.url = "***REDACTED***"' < "${payload}")"
    else
      payload_string="$(jq -rc '.' < "${payload}")"
    fi
    metadata="$(jq -r --arg payload "$payload_string" '.metadata += [{name: "payload", value: $payload}]' <<<"$metadata")"
  fi
fi

jq \
  --argjson metadata "${metadata:-null}" \
  --argjson debug "${debug_info:-null}" \
  '{ version: { thread_ts: .ts, channel } } + $metadata + $debug' /tmp/output.json >&3
